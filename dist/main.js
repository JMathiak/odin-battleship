(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{pS:()=>y,$N:()=>p,IE:()=>u,EA:()=>h});let t=[{name:"Carrier",length:5,placed:!1},{name:"Battleship",length:4,placed:!1},{name:"Cruiser",length:3,placed:!1},{name:"Submarine",length:3,placed:!1},{name:"Destroyer",length:2,placed:!1}],r=0;function n(e){let t=document.getElementById(e),r=["A","B","C","D","E","F","G"];for(let e=0;e<8;e++){let n=document.createElement("div");if(n.className="row",n.setAttribute("Y-Cord",e-1),0==e){let e=document.createElement("div");e.className="box",e.innerText="Y/X ",n.appendChild(e)}for(let t=0;t<8;t++){let o=document.createElement("div");o.className="box",0==e?7!==t&&(o.innerText=r[t],o.innerText+="("+t+")"):0==t&&(o.innerText=e-1),7==t&&0==e||(o.setAttribute("X-Cord",t-1),n.appendChild(o))}t.appendChild(n)}}function o(){let e=document.getElementById("player").getElementsByClassName("row");for(let t=1;t<e.length;t++){let r=e[t],n=r.getAttribute("y-cord");for(let e=1;e<r.childNodes.length;e++){let t=r.childNodes[e],o=t.getAttribute("x-cord");"empty"==h.board.board[n][o]&&t.addEventListener("click",l)}}}function l(){let e=document.querySelector('input[name = "direction"]:checked').value;1==h.board.placeShip(e,t[r].name,t[r].length,event.target.parentNode.getAttribute("y-cord"),event.target.getAttribute("x-cord"))&&function(e,t,n){let a=document.getElementById(e).getElementsByClassName("row");for(let e=1;e<a.length;e++){let r=a[e],n=r.getAttribute("y-cord");for(let e=1;e<r.childNodes.length;e++){let o=r.childNodes[e],l=o.getAttribute("x-cord");"empty"!==t.board.board[n][l]&&"miss"!==t.board.board[n][l]&&o.classList.add("ship")}}!function(){let e=document.getElementById("player").getElementsByClassName("row");for(let t=1;t<e.length;t++){let r=e[t];for(let e=1;e<r.childNodes.length;e++)r.childNodes[e].removeEventListener("click",l)}}(),r++,r<5&&o(),5==r&&(u=!0,document.getElementById("direction-form").style.display="none")}("player",h)}function a(){let e=event.target.parentNode.getAttribute("y-cord"),t=event.target.getAttribute("x-cord"),r='[y-Cord="'+e+'"]',n='[x-Cord="'+t+'"]',o=document.getElementById("guess").querySelectorAll(r)[0].querySelectorAll(n)[0];if(y.board.receiveAttack(e,t),"miss"==y.board.board[e][t]?o.classList.add("miss"):"empty"!=y.board.board[e][t]&&o.classList.add("hit"),o.removeEventListener("click",a),1==y.board.checkForAllSunk())return void i("User");let l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());for(;!h.board.receiveAttack(d,l);)l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());let s='[y-cord="'+d+'"]',m='[x-cord="'+l+'"]',c=document.getElementById("player").querySelectorAll(s)[0].querySelectorAll(m)[0];"miss"==h.board.board[d][l]?c.classList.add("miss"):"empty"!=y.board.board[e][t]&&c.classList.add("hit"),1!=h.board.checkForAllSunk()||i("Computer")}function i(e){let t=document.getElementById("display-winner-modal"),r=document.getElementById("winner-modal-text");t.style.display="block",r.innerHTML="The winner is the "+e}const d=function(){var e={ships:[],board:[["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"]],checkForValidPlacement:function(e){let t=e.startingCord.startingXCord,r=e.startingCord.startingYCord,n=e.endingCord.endingXCord,o=e.endingCord.endingYCord;if("vertical"==e.direction){if(6==r)return!1;if(o>6)return!1;for(let e=r;e<=o;e++)if("empty"!=this.board[e][t])return!1}else if("horizontal"==e.direction){if(6==t)return!1;if(n>6)return!1;for(let e=t;e<=n;e++)if("empty"!=this.board[r][e])return!1}return!0},placeShip:function(t,r,n,o,l){let a={},i={startingXCord:l,startingYCord:o};"horizontal"==t?(a.endingXCord=parseInt(l)+n-1,a.endingYCord=o):"vertical"==t&&(a.endingXCord=l,a.endingYCord=parseInt(o)+n-1);let d=function(e,t,r,n,o){var l={};if(l.name=e,l.length=r,l.startingCord=n,l.endingCord=o,l.health=[],l.sunk=!1,l.direction=t,"horizontal"==t)for(let e=0;e<=r;e++)l.health.push({shipPoint:e,hitStatus:"false",coordinates:{xCord:parseInt(n.startingXCord)+e,yCord:parseInt(n.startingYCord)}});else if("vertical"==t)for(let e=0;e<=r;e++)l.health.push({shipPoint:e,hitStatus:"false",coordinates:{xCord:n.startingXCord,yCord:parseInt(n.startingYCord)+e}});return l.isSunk=function(){for(let e=0;e<this.length;e++)if("false"==this.health[e].hitStatus)return!1;return this.sunk=!0,!0},l.hit=function(e){this.health[e].hitStatus="true"},l}(r,t,n,i,a);if(0==this.checkForValidPlacement(d))return!1;if(e.ships.push(d),"horizontal"==t)for(let e=0;e<n;e++){let t={name:d.name,spot:d.health[e]};this.board[o][parseInt(l)+e]=t}else if("vertical"==t)for(let e=0;e<n;e++){let t={name:d.name,spot:d.health[e]};this.board[parseInt(o)+e][l]=t}return!0},receiveAttack:function(e,t){if("empty"!==this.board[e][t]&&"miss"!==this.board[e][t]){let r=this.board[e][t].name,n=this.ships.filter((e=>e.name==r))[0],o=n.health.filter((r=>r.coordinates.xCord==t&&r.coordinates.yCord==e));return n.hit(o[0].shipPoint),n.isSunk(),!0}return"empty"==this.board[e][t]?(this.board[e][t]="miss",!0):"miss"!=this.board[e][t]&&"true"!=this.board[e][t].spot.hitStatus},checkForAllSunk:function(){for(let e=0;e<this.ships.length;e++)if(0==this.ships[e].sunk)return!1;return!0}};return e},s=function(e){let t={};return t.type=e,t.board=d(),t};let m=[{name:"Carrier",length:5,placed:!1},{name:"Battleship",length:4,placed:!1},{name:"Cruiser",length:3,placed:!1},{name:"Submarine",length:3,placed:!1},{name:"Destroyer",length:2,placed:!1}];function c(){1==u?(function(){let e=["horizontal","vertical"],t=Math.floor(7*Math.random()),r=Math.floor(7*Math.random()),n=Math.floor(2*Math.random());for(let o=0;o<m.length;o++)for(;!y.board.placeShip(e[n],m[o].name,m[o].length,r,t);)t=Math.floor(7*Math.random()),r=Math.floor(7*Math.random()),n=Math.floor(2*Math.random())}(),function(){let e=document.getElementById("guess").getElementsByClassName("row");for(let t=1;t<e.length;t++){let r=e[t];r.getAttribute("y-cord");for(let e=1;e<r.childNodes.length;e++){let t=r.childNodes[e];t.getAttribute("x-cord"),t.addEventListener("click",a)}}}()):setTimeout(c,500)}function p(){!function(){r=0;let e=document.getElementById("player"),t=document.getElementById("guess");for(;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)t.removeChild(t.firstChild)}(),function(){for(let e=0;e<7;e++)for(let t=0;t<7;t++)h.board.board[e][t]="empty",y.board.board[e][t]="empty"}(),u=!1,document.getElementById("direction-form").style.display="block",n("player"),o(),n("guess"),c()}!function(){let e=document.getElementById("play-again"),t=document.getElementById("okay-button"),r=document.getElementById("play-again-modal"),n=document.getElementById("display-winner-modal"),o=document.getElementById("how-to-play");e.addEventListener("click",p),t.addEventListener("click",(function(){n.style.display="none"})),r.addEventListener("click",(function(){n.style.display="none",p()})),document.getElementById("play-button").addEventListener("click",(function(){o.style.display="none"})),window.onclick=function(e){e.target==n&&(n.style.display="none"),e.target==o&&(o.style.display="none")}}();let h=s("human"),y=s("computer"),u=!1;n("player"),o(),n("guess"),c(),exports.createShip=createShip,exports.createGameBoard=createGameBoard,exports.gameLoop=gameLoop})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
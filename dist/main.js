(()=>{"use strict";var t={d:(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{Z:()=>s});let e=[{name:"Carrier",length:5,placed:!1},{name:"Battleship",length:4,placed:!1},{name:"Cruiser",length:3,placed:!1},{name:"Submarine",length:3,placed:!1},{name:"Destroyer",length:2,placed:!1}],r=0;function o(t,e){let r=document.getElementById(t),o=["A","B","C","D","E","F","G"];for(let t=0;t<8;t++){let e=document.createElement("div");if(e.className="row",e.setAttribute("Y-Cord",t),0==t){let t=document.createElement("div");t.className="box",t.innerText="Y/X ",e.appendChild(t)}for(let r=0;r<8;r++){let n=document.createElement("div");n.className="box",n.setAttribute("X-Cord",r),0==t?7!==r&&(n.innerText=o[r],n.innerText+="("+r+")"):0==r&&(n.innerText=t),7==r&&0==t||e.appendChild(n)}r.appendChild(e)}console.log(r.getElementsByClassName("row")[1].childNodes[0])}function n(){console.log(s);let t=document.getElementById("player").getElementsByClassName("row");for(let e=1;e<t.length;e++){let r=t[e],o=r.getAttribute("y-cord");for(let t=1;t<r.childNodes.length;t++){let e=r.childNodes[t],n=e.getAttribute("x-cord");"empty"==s.board.board[o-1][n-1]&&e.addEventListener("click",a)}}}function a(){console.log(event.target),1==s.board.placeShip("horizontal",e[r].name,e[r].length,event.target.parentNode.getAttribute("y-cord")-1,event.target.getAttribute("x-cord")-1)&&function(t,e,o){let l=document.getElementById(t).getElementsByClassName("row");for(let t=1;t<l.length;t++){let r=l[t],o=r.getAttribute("y-cord");for(let t=1;t<r.childNodes.length;t++){let n=r.childNodes[t],a=n.getAttribute("x-cord");"empty"!==e.board.board[o-1][a-1]&&"miss"!==e.board.board[o-1][a-1]&&n.classList.add("ship")}}!function(){let t=document.getElementById("player").getElementsByClassName("row");for(let e=1;e<t.length;e++){let r=t[e];for(let t=1;t<r.childNodes.length;t++)r.childNodes[t].removeEventListener("click",a)}}(),r++,n()}("player",s)}function l(t,e,r,o,n){var a={};if(a.name=t,a.length=r,a.startingCord=o,a.endingCord=n,a.health=[],a.sunk=!1,a.direction=e,"horizontal"==e)for(let t=1;t<=r;t++)a.health.push({shipPoint:t,hitStatus:"false",coordinates:{xCord:o.startingXCord+t,yCord:o.startingYCord}});else if("vertical"==e)for(let t=1;t<=r;t++)a.health.push({shipPoint:t,hitStatus:"false",coordinates:{xCord:o.startingXCord,yCord:o.startingYCord+t}});return a.isSunk=function(){for(let t=0;t<this.length;t++)if("false"===this.health[t].hitStatus)return!1;return this.sunk=!0,!0},a.hit=function(t){this.health[t].hitStatus="true"},a}function i(){var t={ships:[],board:[["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"]],checkForValidPlacement:function(t){let e=t.startingCord.startingXCord,r=t.startingCord.startingYCord,o=t.endingCord.endingXCord,n=t.endingCord.endingYCord;if("vertical"==t.direction){if(6==r)return!1;if(n>6)return console.log(t.name,n),!1;for(let o=r;o<=n;o++)if(console.log(t.name,this.board[o][e]),"empty"!=this.board[o][e])return!1}else if("horizontal"==t.direction){if(6==e)return!1;if(o>6)return!1;for(let n=e;n<=o;n++)if(console.log(t.name,this.board[r][n]),"empty"!=this.board[r][n])return!1}return!0},placeShip:function(e,r,o,n,a){let i={},d={startingXCord:a,startingYCord:n};"horizontal"==e?(i.endingXCord=a+o-1,i.endingYCord=n):"vertical"==e&&(i.endingXCord=a,i.endingYCord=n+o-1);let h=l(r,e,o,d,i);if(0==this.checkForValidPlacement(h))return!1;if(t.ships.push(h),"horizontal"==e)for(let t=0;t<o;t++){let e={name:h.name,spot:h.health[t]};this.board[n][a+t]=e}else if("vertical"==e)for(let t=0;t<o;t++){let e={name:h.name,spot:h.health[t]};this.board[n+t][a]=e}return!0},receiveAttack:function(t,e){if("empty"!==this.board[t][e]&&"miss"!==this.board[t][e]){let r=this.board[t][e].name,o=this.ships.filter((t=>t.name==r))[0],n=o.health.filter((r=>r.coordinates.xCord===e&&r.coordinates.yCord===t));return o.hit(n[0].shipPoint),o.isSunk(),!0}return"empty"==this.board[t][e]?(this.board[t][e]="miss",!0):"miss"!=this.board[t][e]&&"true"!=this.board[t][e].spot.hitStatus},checkForAllSunk:function(){for(let t=0;t<this.ships.length;t++)if(0==this.ships[t].sunk)return!1;return!0}};return t}function d(t){let e={};return e.type=t,e.board=i(),e}let h=d("human");o("player");const s=h;n(),o("guess"),exports.createShip=l,exports.createGameBoard=i,exports.gameLoop=function(){let t=d("human"),e=d("computer"),r=null,o=["Carrier","Battleship","Cruiser","Submarine","Destroyer"],n=[5,4,3,3,2],a=["horizontal","vertical"],l=Math.floor(7*Math.random()),i=Math.floor(7*Math.random()),h=Math.floor(1*Math.random());for(let t=0;t<o.length;t++)for(;!e.board.placeShip(a[h],o[t],n[t],i,l);)l=Math.floor(7*Math.random()),i=Math.floor(7*Math.random());l=Math.floor(7*Math.random()),i=Math.floor(7*Math.random());for(let e=0;e<o.length;e++)for(;!t.board.placeShip(a[h],o[e],n[e],i,l);)l=Math.floor(7*Math.random()),i=Math.floor(7*Math.random());for(;null==r;){for(l=Math.floor(7*Math.random()),i=Math.floor(7*Math.random());!e.board.receiveAttack(i,l);)l=Math.floor(7*Math.random()),i=Math.floor(7*Math.random());if(1==e.board.checkForAllSunk()&&(r="Human"),null==r){for(l=Math.floor(7*Math.random()),i=Math.floor(7*Math.random());!t.board.receiveAttack(i,l);)l=Math.floor(7*Math.random()),i=Math.floor(7*Math.random());1==t.board.checkForAllSunk()&&(r="Computer")}}return r}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
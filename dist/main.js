(()=>{"use strict";var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{pS:()=>p,$N:()=>m,IE:()=>y,EA:()=>h});let t=[{name:"Carrier",length:5,placed:!1},{name:"Battleship",length:4,placed:!1},{name:"Cruiser",length:3,placed:!1},{name:"Submarine",length:3,placed:!1},{name:"Destroyer",length:2,placed:!1}],o=0;function r(e){let t=document.getElementById(e),o=["A","B","C","D","E","F","G"];for(let e=0;e<8;e++){let r=document.createElement("div");if(r.className="row",r.setAttribute("Y-Cord",e-1),0==e){let e=document.createElement("div");e.className="box",e.innerText="Y/X ",r.appendChild(e)}for(let t=0;t<8;t++){let n=document.createElement("div");n.className="box",0==e?7!==t&&(n.innerText=o[t],n.innerText+="("+t+")"):0==t&&(n.innerText=e-1),7==t&&0==e||(n.setAttribute("X-Cord",t-1),r.appendChild(n))}t.appendChild(r)}console.log(t.getElementsByClassName("row")[1].childNodes[0])}function n(){console.log(h);let e=document.getElementById("player").getElementsByClassName("row");for(let t=1;t<e.length;t++){let o=e[t],r=o.getAttribute("y-cord");for(let e=1;e<o.childNodes.length;e++){let t=o.childNodes[e],n=t.getAttribute("x-cord");"empty"==h.board.board[r][n]&&t.addEventListener("click",l)}}}function l(){let e=document.querySelector('input[name = "direction"]:checked').value;console.log(e),console.log(event.target),console.log(event.target.parentNode.getAttribute("y-cord")),console.log("xcord",event.target.getAttribute("x-cord")),1==h.board.placeShip(e,t[o].name,t[o].length,event.target.parentNode.getAttribute("y-cord"),event.target.getAttribute("x-cord"))&&function(e,t,r){let a=document.getElementById(e).getElementsByClassName("row");console.log(a[1].childNodes);for(let e=1;e<a.length;e++){let o=a[e],r=o.getAttribute("y-cord");for(let e=1;e<o.childNodes.length;e++){let n=o.childNodes[e],l=n.getAttribute("x-cord");"empty"!==t.board.board[r][l]&&"miss"!==t.board.board[r][l]&&n.classList.add("ship")}}!function(){let e=document.getElementById("player").getElementsByClassName("row");for(let t=1;t<e.length;t++){let o=e[t];for(let e=1;e<o.childNodes.length;e++)o.childNodes[e].removeEventListener("click",l)}}(),o++,o<5&&n(),5==o&&(y=!0,console.log("here"))}("player",h)}function a(){let e=event.target.parentNode.getAttribute("y-cord"),t=event.target.getAttribute("x-cord"),o='[y-Cord="'+e+'"]',r='[x-Cord="'+t+'"]',n=document.getElementById("guess").querySelectorAll(o)[0].querySelectorAll(r)[0];if(p.board.receiveAttack(e,t),"miss"==p.board.board[e][t]?n.classList.add("miss"):"empty"!=p.board.board[e][t]&&n.classList.add("hit"),1==p.board.checkForAllSunk())return void i("User");let l=Math.floor(7*Math.random()),a=Math.floor(7*Math.random());for(;!h.board.receiveAttack(a,l);)l=Math.floor(7*Math.random()),a=Math.floor(7*Math.random());let d='[y-cord="'+a+'"]',s='[x-cord="'+l+'"]',c=document.getElementById("player").querySelectorAll(d)[0].querySelectorAll(s)[0];"miss"==h.board.board[a][l]?c.classList.add("miss"):"empty"!=p.board.board[e][t]&&c.classList.add("hit"),1!=h.board.checkForAllSunk()||i("Computer")}function i(e){let t=document.getElementById("display-winner-modal"),o=document.getElementById("winner-modal-text");t.style.display="block",o.innerHTML="The winner is the "+e}const d=function(){var e={ships:[],board:[["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"]],checkForValidPlacement:function(e){let t=e.startingCord.startingXCord,o=e.startingCord.startingYCord,r=e.endingCord.endingXCord,n=e.endingCord.endingYCord;if(console.log(t,o,r,n),"vertical"==e.direction){if(6==o)return!1;if(n>6)return console.log(e.name,n),!1;for(let r=o;r<=n;r++)if(console.log(e.name,this.board[r][t]),"empty"!=this.board[r][t])return!1}else if("horizontal"==e.direction){if(6==t)return!1;if(r>6)return!1;for(let n=t;n<=r;n++)if(console.log(e.name,this.board[o][n]),"empty"!=this.board[o][n])return!1}return!0},placeShip:function(t,o,r,n,l){let a={},i={startingXCord:l,startingYCord:n};"horizontal"==t?(a.endingXCord=parseInt(l)+r-1,a.endingYCord=n):"vertical"==t&&(a.endingXCord=l,a.endingYCord=parseInt(n)+r-1);let d=function(e,t,o,r,n){var l={};if(l.name=e,l.length=o,l.startingCord=r,l.endingCord=n,l.health=[],l.sunk=!1,l.direction=t,"horizontal"==t)for(let e=0;e<=o;e++)l.health.push({shipPoint:e,hitStatus:"false",coordinates:{xCord:parseInt(r.startingXCord)+e,yCord:parseInt(r.startingYCord)}});else if("vertical"==t)for(let e=0;e<=o;e++)l.health.push({shipPoint:e,hitStatus:"false",coordinates:{xCord:r.startingXCord,yCord:parseInt(r.startingYCord)+e}});return l.isSunk=function(){for(let e=0;e<this.length;e++)if("false"==this.health[e].hitStatus)return!1;return this.sunk=!0,!0},l.hit=function(e){this.health[e].hitStatus="true"},l}(o,t,r,i,a);if(0==this.checkForValidPlacement(d))return!1;if(e.ships.push(d),"horizontal"==t)for(let e=0;e<r;e++){let t={name:d.name,spot:d.health[e]};console.log(parseInt(l)+e),this.board[n][parseInt(l)+e]=t}else if("vertical"==t)for(let e=0;e<r;e++){let t={name:d.name,spot:d.health[e]};this.board[parseInt(n)+e][l]=t}return!0},receiveAttack:function(e,t){if("empty"!==this.board[e][t]&&"miss"!==this.board[e][t]){let o=this.board[e][t].name,r=this.ships.filter((e=>e.name==o))[0];console.log(r),console.log("Received X Cord",t),console.log("Received Y Cord",e);let n=r.health.filter((o=>o.coordinates.xCord==t&&o.coordinates.yCord==e));return console.log(o),console.log(n),r.hit(n[0].shipPoint),r.isSunk(),!0}return"empty"==this.board[e][t]?(this.board[e][t]="miss",!0):"miss"!=this.board[e][t]&&"true"!=this.board[e][t].spot.hitStatus},checkForAllSunk:function(){for(let e=0;e<this.ships.length;e++)if(0==this.ships[e].sunk)return!1;return!0}};return e},s=function(e){let t={};return t.type=e,t.board=d(),t};function c(){1==y?(function(){let e=["horizontal","vertical"],t=Math.floor(7*Math.random()),o=Math.floor(7*Math.random()),r=Math.floor(2*Math.random());for(let n=0;n<ships.length;n++){for(;!p.board.placeShip(e[r],ships[n].name,ships[n].length,o,t);)t=Math.floor(7*Math.random()),o=Math.floor(7*Math.random()),r=Math.floor(2*Math.random());console.log(ships[n].name,"placed")}console.log(p.board.board)}(),function(){let e=document.getElementById("guess").getElementsByClassName("row");for(let t=1;t<e.length;t++){let o=e[t];o.getAttribute("y-cord");for(let e=1;e<o.childNodes.length;e++){let t=o.childNodes[e];t.getAttribute("x-cord"),t.addEventListener("click",a)}}}()):setTimeout(c,500)}function m(){!function(){o=0;let e=document.getElementById("player"),t=document.getElementById("guess");for(;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)t.removeChild(t.firstChild)}(),function(){for(let e=0;e<7;e++)for(let t=0;t<7;t++)h.board.board[e][t]="empty",p.board.board[e][t]="empty"}(),y=!1,r("player"),n(),r("guess"),c()}!function(){let e=document.getElementById("play-again"),t=document.getElementById("display-modal"),o=document.getElementById("okay-button"),r=document.getElementById("play-again-modal"),n=document.getElementById("display-winner-modal");e.addEventListener("click",m),t.addEventListener("click",i),o.addEventListener("click",(function(){n.style.display="none"})),r.addEventListener("click",(function(){n.style.display="none",m()})),window.onclick=function(e){e.target==n&&(n.style.display="none")}}();let h=s("human"),p=s("computer"),y=!1;r("player"),n(),r("guess"),c(),exports.createShip=createShip,exports.createGameBoard=createGameBoard,exports.gameLoop=gameLoop})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
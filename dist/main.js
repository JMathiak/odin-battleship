(()=>{"use strict";var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{pS:()=>c,IE:()=>p,EA:()=>m});let t=[{name:"Carrier",length:5,placed:!1},{name:"Battleship",length:4,placed:!1},{name:"Cruiser",length:3,placed:!1},{name:"Submarine",length:3,placed:!1},{name:"Destroyer",length:2,placed:!1}],o=0;function r(e){let t=document.getElementById(e),o=["A","B","C","D","E","F","G"];for(let e=0;e<8;e++){let r=document.createElement("div");if(r.className="row",r.setAttribute("Y-Cord",e-1),0==e){let e=document.createElement("div");e.className="box",e.innerText="Y/X ",r.appendChild(e)}for(let t=0;t<8;t++){let a=document.createElement("div");a.className="box",0==e?7!==t&&(a.innerText=o[t],a.innerText+="("+t+")"):0==t&&(a.innerText=e-1),7==t&&0==e||(a.setAttribute("X-Cord",t-1),r.appendChild(a))}t.appendChild(r)}console.log(t.getElementsByClassName("row")[1].childNodes[0])}function a(){console.log(m);let e=document.getElementById("player").getElementsByClassName("row");for(let t=1;t<e.length;t++){let o=e[t],r=o.getAttribute("y-cord");for(let e=1;e<o.childNodes.length;e++){let t=o.childNodes[e],a=t.getAttribute("x-cord");"empty"==m.board.board[r][a]&&t.addEventListener("click",n)}}}function n(){let e=document.querySelector('input[name = "direction"]:checked').value;console.log(e),console.log(event.target),console.log(event.target.parentNode.getAttribute("y-cord")),console.log("xcord",event.target.getAttribute("x-cord")),1==m.board.placeShip(e,t[o].name,t[o].length,event.target.parentNode.getAttribute("y-cord"),event.target.getAttribute("x-cord"))&&function(e,t,r){let l=document.getElementById(e).getElementsByClassName("row");console.log(l[1].childNodes);for(let e=1;e<l.length;e++){let o=l[e],r=o.getAttribute("y-cord");for(let e=1;e<o.childNodes.length;e++){let a=o.childNodes[e],n=a.getAttribute("x-cord");"empty"!==t.board.board[r][n]&&"miss"!==t.board.board[r][n]&&a.classList.add("ship")}}!function(){let e=document.getElementById("player").getElementsByClassName("row");for(let t=1;t<e.length;t++){let o=e[t];for(let e=1;e<o.childNodes.length;e++)o.childNodes[e].removeEventListener("click",n)}}(),o++,o<5&&a(),5==o&&(p=!0,console.log("here"))}("player",m)}function l(){let e=event.target.parentNode.getAttribute("y-cord"),t=event.target.getAttribute("x-cord"),o='[y-Cord="'+e+'"]',r='[x-Cord="'+t+'"]',a=document.getElementById("guess").querySelectorAll(o)[0].querySelectorAll(r)[0];if(c.board.receiveAttack(e,t),"miss"==c.board.board[e][t]?a.classList.add("miss"):"empty"!=c.board.board[e][t]&&a.classList.add("hit"),1==c.board.checkForAllSunk())return void alert("User has Won");let n=Math.floor(7*Math.random()),l=Math.floor(7*Math.random());for(;!m.board.receiveAttack(l,n);)n=Math.floor(7*Math.random()),l=Math.floor(7*Math.random());let d='[y-cord="'+l+'"]',i='[x-cord="'+n+'"]',s=document.getElementById("player").querySelectorAll(d)[0].querySelectorAll(i)[0];"miss"==m.board.board[l][n]?s.classList.add("miss"):"empty"!=c.board.board[e][t]&&s.classList.add("hit"),1!=m.board.checkForAllSunk()||alert("Comp has Won")}function d(e,t,o,r,a){var n={};if(n.name=e,n.length=o,n.startingCord=r,n.endingCord=a,n.health=[],n.sunk=!1,n.direction=t,"horizontal"==t)for(let e=0;e<=o;e++)n.health.push({shipPoint:e,hitStatus:"false",coordinates:{xCord:parseInt(r.startingXCord)+e,yCord:parseInt(r.startingYCord)}});else if("vertical"==t)for(let e=0;e<=o;e++)n.health.push({shipPoint:e,hitStatus:"false",coordinates:{xCord:r.startingXCord,yCord:parseInt(r.startingYCord)+e}});return n.isSunk=function(){for(let e=0;e<this.length;e++)if("false"==this.health[e].hitStatus)return!1;return this.sunk=!0,!0},n.hit=function(e){this.health[e].hitStatus="true"},n}function i(){var e={ships:[],board:[["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"],["empty","empty","empty","empty","empty","empty","empty"]],checkForValidPlacement:function(e){let t=e.startingCord.startingXCord,o=e.startingCord.startingYCord,r=e.endingCord.endingXCord,a=e.endingCord.endingYCord;if(console.log(t,o,r,a),"vertical"==e.direction){if(6==o)return!1;if(a>6)return console.log(e.name,a),!1;for(let r=o;r<=a;r++)if(console.log(e.name,this.board[r][t]),"empty"!=this.board[r][t])return!1}else if("horizontal"==e.direction){if(6==t)return!1;if(r>6)return!1;for(let a=t;a<=r;a++)if(console.log(e.name,this.board[o][a]),"empty"!=this.board[o][a])return!1}return!0},placeShip:function(t,o,r,a,n){let l={},i={startingXCord:n,startingYCord:a};"horizontal"==t?(l.endingXCord=parseInt(n)+r-1,l.endingYCord=a):"vertical"==t&&(l.endingXCord=n,l.endingYCord=parseInt(a)+r-1);let s=d(o,t,r,i,l);if(0==this.checkForValidPlacement(s))return!1;if(e.ships.push(s),"horizontal"==t)for(let e=0;e<r;e++){let t={name:s.name,spot:s.health[e]};console.log(parseInt(n)+e),this.board[a][parseInt(n)+e]=t}else if("vertical"==t)for(let e=0;e<r;e++){let t={name:s.name,spot:s.health[e]};this.board[parseInt(a)+e][n]=t}return!0},receiveAttack:function(e,t){if("empty"!==this.board[e][t]&&"miss"!==this.board[e][t]){let o=this.board[e][t].name,r=this.ships.filter((e=>e.name==o))[0];console.log(r),console.log("Received X Cord",t),console.log("Received Y Cord",e);let a=r.health.filter((o=>o.coordinates.xCord==t&&o.coordinates.yCord==e));return console.log(o),console.log(a),r.hit(a[0].shipPoint),r.isSunk(),!0}return"empty"==this.board[e][t]?(this.board[e][t]="miss",!0):"miss"!=this.board[e][t]&&"true"!=this.board[e][t].spot.hitStatus},checkForAllSunk:function(){for(let e=0;e<this.ships.length;e++)if(0==this.ships[e].sunk)return!1;return!0}};return e}function s(e){let t={};return t.type=e,t.board=i(),t}let h=[{name:"Carrier",length:5,placed:!1},{name:"Battleship",length:4,placed:!1},{name:"Cruiser",length:3,placed:!1},{name:"Submarine",length:3,placed:!1},{name:"Destroyer",length:2,placed:!1}];let m=s("human"),c=s("computer"),p=!1;r("player"),a(),r("guess"),function e(){1==p?(function(){let e=["horizontal","vertical"],t=Math.floor(7*Math.random()),o=Math.floor(7*Math.random()),r=Math.floor(2*Math.random());for(let a=0;a<h.length;a++){for(;!c.board.placeShip(e[r],h[a].name,h[a].length,o,t);)t=Math.floor(7*Math.random()),o=Math.floor(7*Math.random()),r=Math.floor(2*Math.random());console.log(h[a].name,"placed")}console.log(c.board.board)}(),function(){let e=document.getElementById("guess").getElementsByClassName("row");for(let t=1;t<e.length;t++){let o=e[t];o.getAttribute("y-cord");for(let e=1;e<o.childNodes.length;e++){let t=o.childNodes[e];t.getAttribute("x-cord"),t.addEventListener("click",l)}}}()):setTimeout(e,500)}(),exports.createShip=d,exports.createGameBoard=i,exports.gameLoop=function(){let e=s("human"),t=s("computer"),o=null,r=["Carrier","Battleship","Cruiser","Submarine","Destroyer"],a=[5,4,3,3,2],n=["horizontal","vertical"],l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random()),i=Math.floor(1*Math.random());for(let e=0;e<r.length;e++)for(;!t.board.placeShip(n[i],r[e],a[e],d,l);)l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());for(let t=0;t<r.length;t++)for(;!e.board.placeShip(n[i],r[t],a[t],d,l);)l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());for(;null==o;){for(l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());!t.board.receiveAttack(d,l);)l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());if(1==t.board.checkForAllSunk()&&(o="Human"),null==o){for(l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());!e.board.receiveAttack(d,l);)l=Math.floor(7*Math.random()),d=Math.floor(7*Math.random());1==e.board.checkForAllSunk()&&(o="Computer")}}return o}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,